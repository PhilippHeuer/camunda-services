plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.0'
}

group = "com.github.philippheuer"
description = "Common camunda services"
version = System.getenv('CI_COMMIT_REF_NAME')

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    // Camunda
    compileOnly group: 'org.camunda.bpm', name: 'camunda-engine', version: '7.9.0'
    compileOnly group: 'org.camunda.bpm', name: 'camunda-engine-spring', version: '7.9.0'

    // Log
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // Lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
}

/**
 * Sources - build a jar with source files
 */
task sourcesJar(type: Jar, dependsOn: classes, description: 'Builds the sourcesJar.', group: 'build') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc, description: 'Builds the javadocJar.', group: 'build') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/**
 * Artifacts
 */
artifacts {
    archives sourcesJar
    archives javadocJar
}

/**
 * Deployment
 */
publishing {
    publications {
        mainProject(MavenPublication) {
            from project.components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version String.valueOf(project.version).replace("v", "")
            pom.withXml {
                def root = asNode()
                root.appendNode("description", project.description)
                root.appendNode("name", project.name)
            }
        }
    }
}

/**
 * Bintray Upload
 */
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mainProject']
    dryRun = false
    publish = true
    pkg {
        // jcenter repository namespace and name
        userOrg = String.valueOf(System.getenv('CI_PROJECT_NAMESPACE')).toLowerCase()
        repo = 'maven'
        name =  String.valueOf(project.name).toLowerCase()
        desc = project.description
        licenses = ['MIT']
        vcsUrl = System.getenv('CI_REPOSITORY_URL')
        labels = []
        publicDownloadNumbers = true
        version {
            name = String.valueOf(project.version).replace("v", "")
            vcsTag = project.version
            released  = new Date()
        }
    }
}
